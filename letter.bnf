// lexical grammar

%lex

%%


\/\/.*  /* comments */
\/\*(.|\s)*\*\/   /* multi line comments */


\bfn\b  return 'FUNCTION'
\breturn\b  return 'RETURN'
\bif\b  return 'IF'
\belse\b  return 'ELSE'

\btrue\b return 'TRUE'
\bfalse\b return 'FALSE'
\bnull\b return 'NULL'




\s+ /* 省略 whitespaces */

\d+  return "NUMBER"
\w+  return "IDENTIFIER"
[\=!]\= return 'EQUALITY_OPERATOR'

[+\-] return "ADDITIVE_OPERATOR"

[*\/] return "MULTIPLICATIVE_OPERATOR"
[><]\=? return 'RELATIONAL_OPERATOR'

/lex

// Module include

%{

function BinaryExpression(left,operator,right){
  return{ type:'BinaryExpression', operator , left,right }
}

function Literal(namePrefix,value){
  return {
    type:`${namePrefix}Literal`,
    value
  }
}
%}


// syntactic grammar

// 强制 left-associative 写在越后面 优先级越高
// %left '+'
// %left '*'

// ELSE 的优先级高于 THEN
%nonassoc THEN
%nonassoc ELSE

%%
// 后面的{}就相当于handler（或者说 拦截器？），做一些处理。
Program : StatementList { $$ = {type:"Program", body:$1 } } ;

// StatementList Statement
// StatementList Statement Statement
// ....
// Statement Statement ..........

StatementList : Statement { $$ = [$1] }
              | StatementList Statement { $1.push($2); $$ = $1  }
              ;


Statement: ExpressionStatement
        | EmptyStatement
        | BlockStatement
        | FunctionDeclaration
        | ReturnStatement
        | IfStatement
        ;

IfStatement : IF '(' Expression ')' Statement %prec THEN
            | IF '(' Expression ')' Statement ELSE Statement
            ;

FunctionDeclaration : FUNCTION Identifier '(' OptFormalParameterList ')' BlockStatement
                    {
                      $$ = {
                        type: 'FunctionDeclaration',
                        name: $2,
                        params: $4,
                        body:$6,
                      }
                    }
                    ;
Identifier : IDENTIFIER { $$ = { type:"Identifier", value: $1 } };

// 入参可以为空 或者一串Identifier
OptFormalParameterList : FormalParameterList
                      | {$$ = []}
                      ;

// 跟StatementList一样
FormalParameterList : Identifier  {$$ = [$1]}
                  | FormalParameterList ',' Identifier {$1.push($3); $$ = $1}
                  ;

ReturnStatement : RETURN OptExpression ';' { $$ = {type:'ReturnStatement', arguments:$2 }} ;
// Return 和面可以为null或者Expression
OptExpression : Expression | {$$ = null} ;


BlockStatement : '{' OptStatementList '}' {$$ = { type:"BLockStatement",statements: $2 }} ;

OptStatementList: StatementList
                | {$$ = []} // Empty
                ;


EmptyStatement : ';' { $$ = {type:"EmptyStatement"} } ;

ExpressionStatement : Expression ';' { $$ = {type:'ExpressionStatement', Expression: $1 } } ;

Expression : EqualityExpression;

EqualityExpression : RelationalExpression
          | EqualityExpression EQUALITY_OPERATOR RelationalExpression {$$ = BinaryExpression($1,$2,$3)}
          ;

RelationalExpression : AdditiveExpression
                    | RelationalExpression RELATIONAL_OPERATOR AdditiveExpression {$$ = BinaryExpression($1,$2,$3)}
                    ;


AdditiveExpression : AdditiveExpression ADDITIVE_OPERATOR MultiplicativeExpression { $$ = BinaryExpression($1, $2, $3) }
  | MultiplicativeExpression
  ;

MultiplicativeExpression : MultiplicativeExpression MULTIPLICATIVE_OPERATOR PrimaryExpression { $$ = BinaryExpression($1, $2, $3) }
  | PrimaryExpression
  ;


PrimaryExpression : Literal
          | parenthesizedExpression
          | Identifier
          ;

Literal : NumericLiteral
        | TrueLiteral
        | FalseLiteral
        | NullLiteral
        ;
TrueLiteral : TRUE { $$ = Literal('Boolean',true) };
FalseLiteral : FALSE { $$ = Literal('Boolean',false) };
NullLiteral : NULL { $$ = Literal('Null',null) };

NumericLiteral : NUMBER { $$ = Literal('Numeric',Number($1))  };


// callback


// $2 -> Exp
parenthesizedExp: '(' Expression ')' { $$ = $2 };
