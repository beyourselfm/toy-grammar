// lexical grammar

%lex

%%


\s+ /* 省略 whitespaces */

\d+  return "NUMBER"

[+\-] return "ADDITIVE_OPERATOR"

[*\/] return "MULTIPLICATIVE_OPERATOR"



/lex

// Module include

%{

function BinaryExpression(left,op,right){
  return{ type:'BinaryExpression', op , left,right }
}

%}


// syntactic grammar

// 强制 left-associative 写在越后面 优先级越高
// %left '+'
// %left '*'

%%
// 后面的{}就相当于handler（或者说 拦截器？），做一些处理。
Program : StatementList { $$ = {type:"Program", body:$1 } } ;

// StatementList Statement
// StatementList Statement Statement
// ....
// Statement Statement ..........

StatementList : Statement { $$ = [$1] }
              | StatementList Statement { $1.push($2); $$ = $1  }
              ;


Statement: ExpressionStatement
        | EmptyStatement
        | BlockStatement
        ;


BlockStatement : '{' StatementList '}' {$$ = { type:"BLockStatement",statements: $2 }} ;

EmptyStatement : ';' { $$ = {type:"EmptyStatement"} } ;

ExpressionStatement : Expression ';' { $$ = {type:'ExpressionStatement', Expression: $1 } } ;


Expression : AdditiveExpression;


AdditiveExpression : AdditiveExpression ADDITIVE_OPERATOR MultiplicativeExpression { $$ = BinaryExpression($1, $2, $3) }
  | MultiplicativeExpression
  ;

MultiplicativeExpression : MultiplicativeExpression MULTIPLICATIVE_OPERATOR PrimaryExpression { $$ = BinaryExpression($1, $2, $3) }
  | PrimaryExpression
  ;


PrimaryExpression : Literal
          | parenthesizedExpression
          ;

Literal : NumericLiteral;


// callback
NumericLiteral : NUMBER { $$ = { type : "NumericLiteral", value:Number($1) } };


// $2 -> Exp
parenthesizedExp: '(' Expression ')' { $$ = $2 };
