// lexical grammar

%lex

%%


\/\/.*  /* comments */
\/\*(.|\s)*\*\/   /* multi line comments */


\bfn\b  return 'FUNCTION'
\breturn\b  return 'RETURN'

\s+ /* 省略 whitespaces */

\d+  return "NUMBER"
\w+  return "IDENTIFIER"


[+\-] return "ADDITIVE_OPERATOR"

[*\/] return "MULTIPLICATIVE_OPERATOR"



/lex

// Module include

%{

function BinaryExpression(left,op,right){
  return{ type:'BinaryExpression', op , left,right }
}

%}


// syntactic grammar

// 强制 left-associative 写在越后面 优先级越高
// %left '+'
// %left '*'

%%
// 后面的{}就相当于handler（或者说 拦截器？），做一些处理。
Program : StatementList { $$ = {type:"Program", body:$1 } } ;

// StatementList Statement
// StatementList Statement Statement
// ....
// Statement Statement ..........

StatementList : Statement { $$ = [$1] }
              | StatementList Statement { $1.push($2); $$ = $1  }
              ;


Statement: ExpressionStatement
        | EmptyStatement
        | BlockStatement
        | FunctionDeclaration
        | ReturnStatement
        ;

FunctionDeclaration : FUNCTION Identifier '(' OptFormalParameterList ')' BlockStatement
                    {
                      $$ = {
                        type: 'FunctionDeclaration',
                        name: $2,
                        params: $4,
                        body:$6,
                      }
                    }
                    ;
Identifier : IDENTIFIER { $$ = { type:"Identifier", value: $1 } };

// 入参可以为空 或者一串Identifier
OptFormalParameterList : FormalParameterList
                      | {$$ = []}
                      ;

// 跟StatementList一样
FormalParameterList : Identifier  {$$ = [$1]}
                  | FormalParameterList ',' Identifier {$1.push($3); $$ = $1}
                  ;

ReturnStatement : RETURN OptExpression ';' { $$ = {type:'ReturnStatement', arguments:$2 }} ;
// Return 和面可以为null或者Expression
OptExpression : Expression | {$$ = null} ;


BlockStatement : '{' OptStatementList '}' {$$ = { type:"BLockStatement",statements: $2 }} ;

OptStatementList: StatementList
                | {$$ = []} // Empty
                ;


EmptyStatement : ';' { $$ = {type:"EmptyStatement"} } ;

ExpressionStatement : Expression ';' { $$ = {type:'ExpressionStatement', Expression: $1 } } ;


Expression : AdditiveExpression;


AdditiveExpression : AdditiveExpression ADDITIVE_OPERATOR MultiplicativeExpression { $$ = BinaryExpression($1, $2, $3) }
  | MultiplicativeExpression
  ;

MultiplicativeExpression : MultiplicativeExpression MULTIPLICATIVE_OPERATOR PrimaryExpression { $$ = BinaryExpression($1, $2, $3) }
  | PrimaryExpression
  ;


PrimaryExpression : Literal
          | parenthesizedExpression
          | Identifier
          ;

Literal : NumericLiteral;


// callback
NumericLiteral : NUMBER { $$ = { type : "NumericLiteral", value:Number($1) } };


// $2 -> Exp
parenthesizedExp: '(' Expression ')' { $$ = $2 };
